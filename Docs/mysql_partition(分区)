 #线上mysql分区表维护
#参考文档
https://www.cnblogs.com/ivictor/p/5032793.html
https://www.cnblogs.com/alamps/p/6740572.html

#文本request_all
saas_st_anti_request_all

#查询是否开启调度器
show variables like '%event_scheduler';
#开启调度器
set global event_scheduler=1;

#历史记录表
#表结构
CREATE TABLE `saas_st_anti_request_all` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `organization` varchar(64) NOT NULL,
  `requestId` varchar(64) NOT NULL,
  `appKey` varchar(64) NOT NULL,
  `type` varchar(64) NOT NULL,
  `tokenId` varchar(64) NOT NULL,
  `timestamp` bigint(20) NOT NULL DEFAULT '0',
  `data` longblob,
  `score` int(11) DEFAULT NULL,
  `riskLevel` varchar(64) NOT NULL DEFAULT 'PASS',
  `detail` mediumtext,
  `code` text,
  `message` mediumtext,
  `channel` varchar(64) DEFAULT NULL,
  `experimentId` varchar(64) DEFAULT NULL,
  `feedback` varchar(4096) DEFAULT NULL,
  `ip` varchar(64) DEFAULT NULL,
  `deviceId` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`id`,`timestamp`),
  KEY `ix_timestamp` (`timestamp`),
  KEY `organization_timestamp` (`organization`,`timestamp`),
  KEY `requestId_organization_timestamp` (`requestId`,`organization`,`timestamp`),
  KEY `tokenId_organization_timestamp` (`tokenId`,`organization`,`timestamp`),
  KEY `organization_riskLevel_timestamp` (`organization`,`riskLevel`,`timestamp`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4
PARTITION BY RANGE COLUMNS(timestamp)
(PARTITION p20180703 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-04')*1000) ENGINE = InnoDB,
PARTITION p20180704 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-05')*1000) ENGINE = InnoDB,
PARTITION p20180705 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-06')*1000) ENGINE = InnoDB
);


#维护语句
delimiter $$
DROP PROCEDURE IF EXISTS saas_st_anti_request_all_pt $$
CREATE PROCEDURE saas_st_anti_request_all_pt()
BEGIN
  select REPLACE(partition_name,'p','') into @P12_Name from INFORMATION_SCHEMA.PARTITIONS where TABLE_SCHEMA='cuijia' and table_name='saas_st_anti_request_all' order by partition_ordinal_position DESC limit 1;
  set @Max_date=date(DATE_ADD(@P12_Name+0, INTERVAL 1 DAY))+0;
  set @Max_date_timestamp=date(DATE_ADD(@P12_Name+0, INTERVAL 2 DAY))+0;
  set @s1=CONCAT('ALTER TABLE saas_st_anti_request_all ADD PARTITION(PARTITION p',@Max_date,' VALUES LESS THAN (UNIX_TIMESTAMP (''',DATE(@Max_date_timestamp),''')*1000))');
  SELECT @s1;
  PREPARE stmt2 FROM @s1;
  EXECUTE stmt2;
  DEALLOCATE PREPARE stmt2;
  
  /*删除*/
  select partition_name into @PO_Name from INFORMATION_SCHEMA.PARTITIONS where table_name='saas_st_anti_request_all' and partition_name != 'NULL' order by partition_ordinal_position limit 1;
  set @s=CONCAT('ALTER TABLE saas_st_anti_request_all DROP PARTITION ', @PO_Name);
  PREPARE stmt1 FROM @s;
  EXECUTE stmt1;
  DEALLOCATE PREPARE stmt1;
  COMMIT;
END$$
delimiter ;

  
#开启调度器
delimiter $$
drop event IF EXISTS Partition_saas_st_anti_request_all_pt $$
create event Partition_saas_st_anti_request_all_pt on schedule EVERY 1 MINUTE STARTS '2018-07-03 10:20:00' 
do 
BEGIN 
   CALL saas_st_anti_request_all_pt(); 
END$$
delimiter ;

#查询结果
select partition_name, partition_description from INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME='saas_st_anti_request_all' AND TABLE_SCHEMA='cuijia';
  
  
  
#############################################################################################################################################################
fp
#------------------------------------------------------------表结构,按天分区
CREATE TABLE `storage_cluster_pt` (
	`id` bigint(20) NOT NULL AUTO_INCREMENT,
	`key` varchar(64) NOT NULL COMMENT '存储key',
	`originalKey` varchar(255) NOT NULL COMMENT '原始key',
	`field` varchar(128) NOT NULL COMMENT '存储列名',
	`value` longblob NOT NULL COMMENT 'value, json',
	`expire` bigint(20) NOT NULL COMMENT '写入时的有效时间，清理结合modifyTime+expire即可',
	`modifyTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`,`modifyTime`),
	KEY `time` (`modifyTime`),
	UNIQUE KEY `key_field` (`key`,`field`,`modifyTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='画像数据存储'
PARTITION BY RANGE (UNIX_TIMESTAMP(modifyTime))
(PARTITION p20180714 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-15 00:00:00')),
PARTITION p20180715 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-16 00:00:00')),
PARTITION p20180716 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-17 00:00:00')),
PARTITION p20180717 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-18 00:00:00')),
PARTITION p20180718 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-19 00:00:00')),
PARTITION p20180719 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-20 00:00:00')),
PARTITION p20180720 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-21 00:00:00'))
);
  
#维护语句
delimiter $$
DROP PROCEDURE IF EXISTS storage_cluster_pt $$
CREATE PROCEDURE storage_cluster_pt()
BEGIN
  select REPLACE(partition_name,'p','') into @P12_Name from INFORMATION_SCHEMA.PARTITIONS where TABLE_SCHEMA='saas_fp_test' and table_name='storage_cluster_pt' order by partition_ordinal_position DESC limit 1;
  set @Max_date=date(DATE_ADD(@P12_Name+0, INTERVAL 1 DAY))+0;
  set @Max_date_timestamp=date(DATE_ADD(@P12_Name+0, INTERVAL 2 DAY))+0;
  set @s1=CONCAT('ALTER TABLE storage_cluster_pt ADD PARTITION(PARTITION p',@Max_date,' VALUES LESS THAN (UNIX_TIMESTAMP (''',DATE(@Max_date_timestamp),''')))');
  SELECT @s1;
  PREPARE stmt2 FROM @s1;
  EXECUTE stmt2;
  DEALLOCATE PREPARE stmt2;
  
  /*删除*/
  select partition_name into @PO_Name from INFORMATION_SCHEMA.PARTITIONS where table_name='storage_cluster_pt' and partition_name != 'NULL' order by partition_ordinal_position limit 1;
  set @s=CONCAT('ALTER TABLE storage_cluster_pt DROP PARTITION ', @PO_Name);
  PREPARE stmt1 FROM @s;
  EXECUTE stmt1;
  DEALLOCATE PREPARE stmt1;
  COMMIT;
END$$
delimiter ;

#开启调度器
delimiter $$
drop event IF EXISTS Partition_storage_cluster_pt $$
create event Partition_storage_cluster_pt on schedule EVERY 1 DAY STARTS '2018-07-13 23:50:00' 
do 
BEGIN 
   CALL storage_cluster_pt(); 
END$$
delimiter ;

#查询结果
select partition_name, partition_description from INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME='storage_cluster_pt' AND TABLE_SCHEMA='saas_fp_test';
  
  
#------------------------------------------------------------按小时分区
CREATE TABLE `storage_cluster_pt` (
	`id` bigint(20) NOT NULL AUTO_INCREMENT,
	`key` varchar(64) NOT NULL COMMENT '存储key',
	`originalKey` varchar(255) NOT NULL COMMENT '原始key',
	`field` varchar(128) NOT NULL COMMENT '存储列名',
	`value` longblob NOT NULL COMMENT 'value, json',
	`expire` bigint(20) NOT NULL COMMENT '写入时的有效时间，清理结合modifyTime+expire即可',
	`modifyTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`,`modifyTime`),
	KEY `time` (`modifyTime`),
	UNIQUE KEY `key_field` (`key`,`field`,`modifyTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='画像数据存储'
PARTITION BY RANGE (UNIX_TIMESTAMP(modifyTime))
(PARTITION p2018071401 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 02:00:00')),
PARTITION p2018071402 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 03:00:00')),
PARTITION p2018071403 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 04:00:00')),
PARTITION p2018071404 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 05:00:00')),
PARTITION p2018071405 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 06:00:00')),
PARTITION p2018071406 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 07:00:00')),
PARTITION p2018071407 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 08:00:00')),
PARTITION p2018071408 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 09:00:00')),
PARTITION p2018071409 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 10:00:00')),
PARTITION p2018071410 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 11:00:00')),
PARTITION p2018071411 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 12:00:00')),
PARTITION p2018071412 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 13:00:00')),
PARTITION p2018071413 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 14:00:00')),
PARTITION p2018071414 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 15:00:00')),
PARTITION p2018071415 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 16:00:00')),
PARTITION p2018071416 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 17:00:00')),
PARTITION p2018071417 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 18:00:00')),
PARTITION p2018071418 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 19:00:00')),
PARTITION p2018071419 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 20:00:00')),
PARTITION p2018071420 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 21:00:00')),
PARTITION p2018071421 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 22:00:00')),
PARTITION p2018071422 VALUES LESS THAN (UNIX_TIMESTAMP('2018-07-14 23:00:00'))
);
  
#维护语句
delimiter $$
DROP PROCEDURE IF EXISTS storage_cluster_pt $$
CREATE PROCEDURE storage_cluster_pt()
BEGIN
  select REPLACE(partition_name,'p','') into @P12_Name from INFORMATION_SCHEMA.PARTITIONS where TABLE_SCHEMA='saas_fp_test' and table_name='storage_cluster_pt' order by partition_ordinal_position DESC limit 1;
  set @MAX_date=DATE_FORMAT(str_to_date(@P12_Name+0,'%Y%m%d%H') +  INTERVAL 1 HOUR,'%Y%m%d%H');
  set @Max_date_timestamp=str_to_date(@P12_Name+0,'%Y%m%d%H') +  INTERVAL 2 HOUR;
  set @s1=CONCAT('ALTER TABLE storage_cluster_pt ADD PARTITION(PARTITION p',@Max_date,' VALUES LESS THAN (UNIX_TIMESTAMP (''',@Max_date_timestamp,''')))');
  SELECT @s1;
  PREPARE stmt2 FROM @s1;
  EXECUTE stmt2;
  DEALLOCATE PREPARE stmt2;
  
  /*删除*/
  select partition_name into @PO_Name from INFORMATION_SCHEMA.PARTITIONS where table_name='storage_cluster_pt' and partition_name != 'NULL' order by partition_ordinal_position limit 1;
  set @s=CONCAT('ALTER TABLE storage_cluster_pt DROP PARTITION ', @PO_Name);
  PREPARE stmt1 FROM @s;
  EXECUTE stmt1;
  DEALLOCATE PREPARE stmt1;
  COMMIT;
END$$
delimiter ;

#开启调度器
delimiter $$
drop event IF EXISTS Partition_storage_cluster_pt $$
create event Partition_storage_cluster_pt on schedule EVERY 1 HOUR STARTS '2018-07-15 01:00:00' 
do 
BEGIN 
   CALL storage_cluster_pt(); 
END$$
delimiter ;


  
  
  
  
  
  
  
  
